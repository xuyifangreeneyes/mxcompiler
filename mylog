VariableDecl and FunctionDecl in class need to check whether it has the same name with class name.
The bug needs fixing.

int a = new int; bool b = new bool; string c = new string; 
These are illegal but have not been checked.

Now calling append after BB is ended will do nothing.

when dealing with assign in ir, calculate lhs's address first and then calculate rhs's value, which can 
save a pair of store and load if rhs is logicOpExpr. Not sure in this way whether there is any side effect.

how does string store in memory? if I get a new string at runtime(such as #getString or #toString), I should 
check whether the string exists in const string pool of memory, but how?

logic shortcut in function call parameters

self-loop does not strictly dominate itself?

ssa does not transform global variable for now.

maybe dst of instruction can be LocalReg. fix it later.

alloca and malloc have no side effect when eliminating dead code ??

Some visitExpr can be replaced by visit in order to reduce cast. Maybe do it later.

CFGSimplifier may delete irFunc.head. For now I don't allow deleting irFunc.head.
If allowing deleting irFunc.head, headBB and entryBB should be distinguished(now they are the same).

Optim order can be considered carefully. Rather than run for a fixed number of loops, it is better to
end optim when nothing is modified. Some interfaces should be changed in order to be more suitable for 
debuging(for example, printIR every time when a single optim is finished) and arrange different optims.

For now my optim doesn't work for 570 because I haven't turned global variables to local when constructing 
SSA. 

For 593, it can be optimized to ret 30 but it costs 7 cycles of optim.

For some Instructions(like Alloca, BinaryOperation), dst must be LocalReg. For now some of dst are Register.

need to record some problems with function call and return.

I don't understand the defination of conventional SSA. I didn't use Algorithm 3.6 on ssa_book. In my parallel copy area,
there is no loop of assignments.

DefUseChain is for LocalReg, so the type should be LocalReg rather than Register.

names should be redesigned. remove @ # $.

ir-interpreter needs to execute Phi parallel. The bug needs fixing.

global __str_i 
is this necessary? 

How to deal with caller and callee registers?

Can I push [memory] in NASM?

In Callee, arguments need to be moved from physical registers or memory to virtual registers.

GlobalReg is not a proper name. DefReg and UseReg's type is LocalReg rather than Register.

