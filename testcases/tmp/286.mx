int func(int a, int b, int c)
{
	return (a + b + c) & ((1 << 30) - 1);
}

int main()
{
	int n = getInt();
	int[][] f = new int[n][n];
	int[][] g = new int[n][n];
	int[][] g_useless = new int[n][n];
	int i; int j; int k;
	for(i = 0; i < n; ++i)
		for(j = 0; j < n; ++j)
			f[i][j] = i + j;
	for(i = 0; i < n; ++i)
		for(j = 0; j < n; ++j)
		{
			for(k = 0; k < n; ++k)
			{
				if(j >= i)
				{
					g[i][j] = func(g[i][j], f[i][k], f[k][j]);
					g_useless[i][j] = func(g[i][j], f[i][k], f[k][j]);
					g_useless[i][j] = func(g[i][j], f[i][k], f[k][j]);
					g_useless[i][j] = func(g[i][j], f[i][k], f[k][j]);
				}
			}
		}
	int sum = 0;
	for(i = 0; i < n; ++i)
		for(j = 0; j < n; ++j)
			sum = (sum + g[i][j]) & ((1 << 30) - 1);
	print(toString(sum));
	return 0;
}


/*
none switch
real    0m0.642s
user    0m0.592s
sys     0m0.004s
switch
real    0m0.510s
user    0m0.465s
sys     0m0.008s
*/


/*!! metadata:
=== comment ===
optim1-5140309234-xietiancheng.txtHint: (j >= i) is invariant, so the code should be changed toif (j >= i){	for (...)	...}You may also want to do a inline optimization if you cannot pass itWe also expect you to do dead code elimination.If the time bound is too tight or too loose, contact TA for help.
=== is_public ===
True
=== assert ===
output
=== timeout ===
20.0
=== input ===
700
=== phase ===
optim pretest
=== output ===
655083248
=== exitcode ===


!!*/
