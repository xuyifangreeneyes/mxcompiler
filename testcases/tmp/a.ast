<Program>
	<VariableDecl> int countA
	<VariableDecl> int countB
	<VariableDecl> int countC
	<VariableDecl> C something
	<ClassDecl> A
		<VariableDecl> A a
		<VariableDecl> B b
		<FunctionDecl>  A
			<BinaryExpr> ASSIGN
				<IdentifierExpr> idx
				<UnaryExpr> INC_SUF
					<IdentifierExpr> countA
			<IfStmt>
				<BinaryExpr> EQ
					<BinaryExpr> MOD
						<IdentifierExpr> idx
						<IntConst> 2
					<IntConst> 0
				<BlockStmt>
					<BinaryExpr> ASSIGN
						<IdentifierExpr> a
						<NewExpr> A
					<IfStmt>
						<BinaryExpr> EQ
							<BinaryExpr> MOD
								<IdentifierExpr> countB
								<IntConst> 2
							<IntConst> 0
						<BlockStmt>
							<BinaryExpr> ASSIGN
								<IdentifierExpr> b
								<NewExpr> B
			<BinaryExpr> ASSIGN
				<IdentifierExpr> c
				<NewExpr> C[][]
					<IntConst> 2
			<BinaryExpr> ASSIGN
				<ArrayAccess>
					<IdentifierExpr> c
					<IntConst> 0
				<ArrayAccess>
					<ArrayAccess>
						<ArrayAccess>
							<NewExpr> C[][][][]
								<IntConst> 6
								<IntConst> 6
								<IntConst> 6
								<IntConst> 6
							<IntConst> 2
						<IntConst> 3
					<IntConst> 3
			<BinaryExpr> ASSIGN
				<ArrayAccess>
					<IdentifierExpr> c
					<IntConst> 1
				<NullLiteral>
			<IfStmt>
				<BinaryExpr> NEQ
					<FunctionCall>
						<MemberAccess>
							<IdentifierExpr> c
							<IdentifierExpr> size
					<IntConst> 2
				<BlockStmt>
					<FunctionCall>
						<IdentifierExpr> println
						<StringConst> Oops!
		<FunctionDecl> C[] getc0
			<ReturnStmt>
				<ArrayAccess>
					<IdentifierExpr> c
					<IntConst> 0
		<VariableDecl> C[][] c
		<VariableDecl> int idx
	<ClassDecl> B
		<VariableDecl> int idx
		<VariableDecl> C c
		<FunctionDecl>  B
			<BinaryExpr> ASSIGN
				<IdentifierExpr> idx
				<UnaryExpr> INC_SUF
					<IdentifierExpr> countB
			<BinaryExpr> ASSIGN
				<IdentifierExpr> c
				<FunctionCall>
					<MemberAccess>
						<FunctionCall>
							<MemberAccess>
								<ArrayAccess>
									<FunctionCall>
										<MemberAccess>
											<NewExpr> A
											<IdentifierExpr> getc0
									<IntConst> 0
								<IdentifierExpr> Me
						<IdentifierExpr> Me
	<ClassDecl> C
		<VariableDecl> int idx
		<FunctionDecl>  C
			<BinaryExpr> ASSIGN
				<MemberAccess>
					<IdentifierExpr> this
					<IdentifierExpr> idx
				<UnaryExpr> INC_SUF
					<IdentifierExpr> countC
			<BinaryExpr> ASSIGN
				<IdentifierExpr> str
				<FunctionCall>
					<IdentifierExpr> toString
					<IdentifierExpr> idx
			<BinaryExpr> ASSIGN
				<IdentifierExpr> something
				<FunctionCall>
					<IdentifierExpr> Me
		<FunctionDecl> C Me
			<ReturnStmt>
				<IdentifierExpr> this
		<VariableDecl> string str
	<FunctionDecl> void count
		<BinaryExpr> ASSIGN
			<IdentifierExpr> countA
			<IntConst> 0
		<BinaryExpr> ASSIGN
			<IdentifierExpr> countB
			<IntConst> 0
		<BinaryExpr> ASSIGN
			<IdentifierExpr> countC
			<IntConst> 0
		<VariableDeclStmt>
			<VariableDecl> B b
				<NewExpr> B
		<FunctionCall>
			<IdentifierExpr> println
			<BinaryExpr> ADD
				<BinaryExpr> ADD
					<BinaryExpr> ADD
						<BinaryExpr> ADD
							<FunctionCall>
								<IdentifierExpr> toString
								<IdentifierExpr> countA
							<StringConst>  
						<FunctionCall>
							<IdentifierExpr> toString
							<IdentifierExpr> countB
					<StringConst>  
				<FunctionCall>
					<IdentifierExpr> toString
					<IdentifierExpr> countC
		<BinaryExpr> ASSIGN
			<IdentifierExpr> countA
			<IntConst> 1
		<BinaryExpr> ASSIGN
			<IdentifierExpr> countB
			<IntConst> 1
		<BinaryExpr> ASSIGN
			<IdentifierExpr> countC
			<IntConst> 1
		<BinaryExpr> ASSIGN
			<IdentifierExpr> b
			<NewExpr> B
		<FunctionCall>
			<IdentifierExpr> print
			<BinaryExpr> ADD
				<BinaryExpr> ADD
					<BinaryExpr> ADD
						<BinaryExpr> ADD
							<FunctionCall>
								<IdentifierExpr> toString
								<BinaryExpr> SUB
									<IdentifierExpr> countA
									<IntConst> 1
							<StringConst>  
						<FunctionCall>
							<IdentifierExpr> toString
							<BinaryExpr> SUB
								<IdentifierExpr> countB
								<IntConst> 1
					<StringConst>  
				<FunctionCall>
					<IdentifierExpr> toString
					<BinaryExpr> SUB
						<IdentifierExpr> countC
						<IntConst> 1
		<FunctionCall>
			<IdentifierExpr> print
			<StringConst> \n
		<FunctionCall>
			<IdentifierExpr> println
			<FunctionCall>
				<IdentifierExpr> toString
				<FunctionCall>
					<MemberAccess>
						<FunctionCall>
							<MemberAccess>
								<MemberAccess>
									<FunctionCall>
										<MemberAccess>
											<IdentifierExpr> something
											<IdentifierExpr> Me
									<IdentifierExpr> str
								<IdentifierExpr> substring
							<IntConst> 1
							<BinaryExpr> SUB
								<FunctionCall>
									<MemberAccess>
										<MemberAccess>
											<IdentifierExpr> something
											<IdentifierExpr> str
										<IdentifierExpr> length
								<IntConst> 1
						<IdentifierExpr> parseInt
		<VariableDeclStmt>
			<VariableDecl> string temp
				<FunctionCall>
					<IdentifierExpr> toString
					<FunctionCall>
						<MemberAccess>
							<MemberAccess>
								<IdentifierExpr> something
								<IdentifierExpr> str
							<IdentifierExpr> ord
						<BinaryExpr> BIT_AND
							<IntConst> 42
							<IntConst> 21
		<IfStmt>
			<BinaryExpr> LT
				<IdentifierExpr> temp
				<MemberAccess>
					<IdentifierExpr> something
					<IdentifierExpr> str
			<BlockStmt>
				<FunctionCall>
					<IdentifierExpr> println
					<BinaryExpr> ADD
						<BinaryExpr> ADD
							<MemberAccess>
								<IdentifierExpr> something
								<IdentifierExpr> str
							<StringConst> >
						<IdentifierExpr> temp
	<FunctionDecl> int main
		<BlockStmt>
			<BlockStmt>
				<BlockStmt>
					<EmptyStmt>
				<EmptyStmt>
				<BlockStmt>
		<EmptyStmt>
		<VariableDeclStmt>
			<VariableDecl> int i
		<ForStmt>
			<BinaryExpr> ASSIGN
				<IdentifierExpr> i
				<IntConst> 0
			<UnaryExpr> INC_SUF
				<IdentifierExpr> i
			<BlockStmt>
				<IfStmt>
					<BinaryExpr> EQ
						<BinaryExpr> EQ
							<BinaryExpr> BIT_XOR
								<IdentifierExpr> i
								<BinaryExpr> BIT_AND
									<IntConst> 891
									<IntConst> 759
							<IntConst> 666
						<UnaryExpr> NOT
							<BoolConst> false
					<BlockStmt>
						<FunctionCall>
							<IdentifierExpr> println
							<FunctionCall>
								<IdentifierExpr> toString
								<IdentifierExpr> i
						<VariableDeclStmt>
							<VariableDecl> int i
								<IntConst> 0
						<FunctionCall>
							<IdentifierExpr> println
							<FunctionCall>
								<IdentifierExpr> toString
								<IdentifierExpr> i
						<BlockStmt>
							<VariableDeclStmt>
								<VariableDecl> int i
									<IntConst> 1
							<FunctionCall>
								<IdentifierExpr> println
								<FunctionCall>
									<IdentifierExpr> toString
									<IdentifierExpr> i
						<FunctionCall>
							<IdentifierExpr> count
						<BreakStmt>
		<WhileStmt>
			<BoolConst> true
			<BlockStmt>
				<IfStmt>
					<BinaryExpr> EQ
						<BinaryExpr> MOD
							<IdentifierExpr> i
							<IntConst> 2
						<IntConst> 0
					<BlockStmt>
						<ContinueStmt>
				<FunctionCall>
					<IdentifierExpr> print
					<BinaryExpr> ADD
						<FunctionCall>
							<IdentifierExpr> toString
							<IdentifierExpr> i
						<StringConst> ,
		<FunctionCall>
			<IdentifierExpr> println
			<StringConst> 
		<ReturnStmt>
			<IntConst> 0
