<Program>
	<VariableDecl> int n
	<FunctionDecl> void init
		<BinaryExpr> ASSIGN
			<IdentifierExpr> n
			<FunctionCall>
				<IdentifierExpr> getInt
	<FunctionDecl> bool is_prime int x
		<IfStmt>
			<BinaryExpr> EQ
				<IdentifierExpr> x
				<IntConst> 1
			<BlockStmt>
				<ReturnStmt>
					<BoolConst> false
		<VariableDeclStmt>
			<VariableDecl> int i
		<ForStmt>
			<BinaryExpr> ASSIGN
				<IdentifierExpr> i
				<IntConst> 2
			<BinaryExpr> LE
				<BinaryExpr> MUL
					<IdentifierExpr> i
					<IdentifierExpr> i
				<IdentifierExpr> x
			<UnaryExpr> INC_SUF
				<IdentifierExpr> i
			<BlockStmt>
				<IfStmt>
					<BinaryExpr> EQ
						<BinaryExpr> MOD
							<IdentifierExpr> x
							<IdentifierExpr> i
						<IntConst> 0
					<BlockStmt>
						<ReturnStmt>
							<BoolConst> false
		<ReturnStmt>
			<BoolConst> true
	<FunctionDecl> void find int x int pre
		<IfStmt>
			<FunctionCall>
				<IdentifierExpr> is_prime
				<IdentifierExpr> x
			<BlockStmt>
				<IfStmt>
					<BinaryExpr> GT
						<IdentifierExpr> pre
						<IntConst> 0
					<BlockStmt>
						<FunctionCall>
							<IdentifierExpr> println
							<StringConst> 2
						<FunctionCall>
							<IdentifierExpr> println
							<BinaryExpr> ADD
								<BinaryExpr> ADD
									<FunctionCall>
										<IdentifierExpr> toString
										<IdentifierExpr> pre
									<StringConst>  
								<FunctionCall>
									<IdentifierExpr> toString
									<IdentifierExpr> x
				<ReturnStmt>
		<VariableDeclStmt>
			<VariableDecl> int i
				<IntConst> 5
		<IfStmt>
			<BinaryExpr> EQ
				<IdentifierExpr> pre
				<UnaryExpr> NEG
					<IntConst> 1
			<BlockStmt>
				<VariableDeclStmt>
					<VariableDecl> int i
						<IntConst> 6
				<ForStmt>
					<BinaryExpr> ASSIGN
						<IdentifierExpr> i
						<BinaryExpr> SUB
							<IdentifierExpr> x
							<IntConst> 2
					<UnaryExpr> DEC_SUF
						<IdentifierExpr> i
					<BlockStmt>
						<IfStmt>
							<FunctionCall>
								<IdentifierExpr> is_prime
								<IdentifierExpr> i
							<BlockStmt>
								<FunctionCall>
									<IdentifierExpr> find
									<BinaryExpr> SUB
										<IdentifierExpr> x
										<IdentifierExpr> i
									<IdentifierExpr> i
								<ReturnStmt>
	<FunctionDecl> void work
		<FunctionCall>
			<IdentifierExpr> find
			<IdentifierExpr> n
			<UnaryExpr> NEG
				<IntConst> 1
	<FunctionDecl> int main
		<FunctionCall>
			<IdentifierExpr> init
		<FunctionCall>
			<IdentifierExpr> work
		<ReturnStmt>
			<IntConst> 0
