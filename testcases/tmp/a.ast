<Program>
	<VariableDecl> int n
	<VariableDecl> int h
	<VariableDecl> int now
	<VariableDecl> int[] a
	<VariableDecl> int A
		<IntConst> 48271
	<VariableDecl> int M
		<IntConst> 2147483647
	<VariableDecl> int Q
	<VariableDecl> int R
	<VariableDecl> int seed
		<IntConst> 1
	<FunctionDecl> int random
		<VariableDeclStmt>
			<VariableDecl> int tempseed
				<BinaryExpr> SUB
					<BinaryExpr> MUL
						<IdentifierExpr> A
						<BinaryExpr> MOD
							<IdentifierExpr> seed
							<IdentifierExpr> Q
					<BinaryExpr> MUL
						<IdentifierExpr> R
						<BinaryExpr> DIV
							<IdentifierExpr> seed
							<IdentifierExpr> Q
		<IfStmt>
			<BinaryExpr> GE
				<IdentifierExpr> tempseed
				<IntConst> 0
			<BlockStmt>
				<BinaryExpr> ASSIGN
					<IdentifierExpr> seed
					<IdentifierExpr> tempseed
		<ReturnStmt>
			<IdentifierExpr> seed
	<FunctionDecl> void initialize int val
		<BinaryExpr> ASSIGN
			<IdentifierExpr> seed
			<IdentifierExpr> val
	<FunctionDecl> void swap int x int y
		<VariableDeclStmt>
			<VariableDecl> int temp
				<ArrayAccess>
					<IdentifierExpr> a
					<IdentifierExpr> x
		<BinaryExpr> ASSIGN
			<ArrayAccess>
				<IdentifierExpr> a
				<IdentifierExpr> x
			<ArrayAccess>
				<IdentifierExpr> a
				<IdentifierExpr> y
		<BinaryExpr> ASSIGN
			<ArrayAccess>
				<IdentifierExpr> a
				<IdentifierExpr> y
			<IdentifierExpr> temp
	<FunctionDecl> bool pd int x
		<ForStmt>
			<BinaryExpr> LE
				<IdentifierExpr> h
				<IdentifierExpr> x
			<UnaryExpr> INC
				<IdentifierExpr> h
			<BlockStmt>
				<IfStmt>
					<BinaryExpr> EQ
						<IdentifierExpr> x
						<BinaryExpr> DIV
							<BinaryExpr> MUL
								<IdentifierExpr> h
								<BinaryExpr> ADD
									<IdentifierExpr> h
									<IntConst> 1
							<IntConst> 2
					<BlockStmt>
						<ReturnStmt>
							<BoolConst> true
		<ReturnStmt>
			<BoolConst> false
	<FunctionDecl> void show
		<VariableDeclStmt>
			<VariableDecl> int i
		<ForStmt>
			<BinaryExpr> ASSIGN
				<IdentifierExpr> i
				<IntConst> 0
			<BinaryExpr> LT
				<IdentifierExpr> i
				<IdentifierExpr> now
			<UnaryExpr> INC
				<IdentifierExpr> i
			<BlockStmt>
				<FunctionCall>
					<IdentifierExpr> print
					<BinaryExpr> ADD
						<FunctionCall>
							<IdentifierExpr> toString
							<ArrayAccess>
								<IdentifierExpr> a
								<IdentifierExpr> i
						<StringConst>  
		<FunctionCall>
			<IdentifierExpr> println
			<StringConst> 
	<FunctionDecl> bool win
		<VariableDeclStmt>
			<VariableDecl> int i
		<VariableDeclStmt>
			<VariableDecl> int j
		<VariableDeclStmt>
			<VariableDecl> int[] b
				<NewExpr> int[]
					<IntConst> 101
		<VariableDeclStmt>
			<VariableDecl> int temp
		<IfStmt>
			<BinaryExpr> NEQ
				<IdentifierExpr> now
				<IdentifierExpr> h
			<BlockStmt>
				<ReturnStmt>
					<BoolConst> false
		<ForStmt>
			<BinaryExpr> ASSIGN
				<IdentifierExpr> j
				<IntConst> 0
			<BinaryExpr> LT
				<IdentifierExpr> j
				<IdentifierExpr> now
			<UnaryExpr> INC
				<IdentifierExpr> j
			<BlockStmt>
				<BinaryExpr> ASSIGN
					<ArrayAccess>
						<IdentifierExpr> b
						<IdentifierExpr> j
					<ArrayAccess>
						<IdentifierExpr> a
						<IdentifierExpr> j
		<ForStmt>
			<BinaryExpr> ASSIGN
				<IdentifierExpr> i
				<IntConst> 0
			<BinaryExpr> LT
				<IdentifierExpr> i
				<BinaryExpr> SUB
					<IdentifierExpr> now
					<IntConst> 1
			<UnaryExpr> INC
				<IdentifierExpr> i
			<BlockStmt>
				<ForStmt>
					<BinaryExpr> ASSIGN
						<IdentifierExpr> j
						<BinaryExpr> ADD
							<IdentifierExpr> i
							<IntConst> 1
					<BinaryExpr> LT
						<IdentifierExpr> j
						<IdentifierExpr> now
					<UnaryExpr> INC
						<IdentifierExpr> j
					<BlockStmt>
						<IfStmt>
							<BinaryExpr> GT
								<ArrayAccess>
									<IdentifierExpr> b
									<IdentifierExpr> i
								<ArrayAccess>
									<IdentifierExpr> b
									<IdentifierExpr> j
							<BlockStmt>
								<BinaryExpr> ASSIGN
									<IdentifierExpr> temp
									<ArrayAccess>
										<IdentifierExpr> b
										<IdentifierExpr> i
								<BinaryExpr> ASSIGN
									<ArrayAccess>
										<IdentifierExpr> b
										<IdentifierExpr> i
									<ArrayAccess>
										<IdentifierExpr> b
										<IdentifierExpr> j
								<BinaryExpr> ASSIGN
									<ArrayAccess>
										<IdentifierExpr> b
										<IdentifierExpr> j
									<IdentifierExpr> temp
		<ForStmt>
			<BinaryExpr> ASSIGN
				<IdentifierExpr> i
				<IntConst> 0
			<BinaryExpr> LT
				<IdentifierExpr> i
				<IdentifierExpr> now
			<UnaryExpr> INC
				<IdentifierExpr> i
			<BlockStmt>
				<IfStmt>
					<BinaryExpr> NEQ
						<ArrayAccess>
							<IdentifierExpr> b
							<IdentifierExpr> i
						<BinaryExpr> ADD
							<IdentifierExpr> i
							<IntConst> 1
					<BlockStmt>
						<ReturnStmt>
							<BoolConst> false
		<ReturnStmt>
			<BoolConst> true
	<FunctionDecl> void merge
		<VariableDeclStmt>
			<VariableDecl> int i
		<ForStmt>
			<BinaryExpr> ASSIGN
				<IdentifierExpr> i
				<IntConst> 0
			<BinaryExpr> LT
				<IdentifierExpr> i
				<IdentifierExpr> now
			<UnaryExpr> INC
				<IdentifierExpr> i
			<BlockStmt>
				<IfStmt>
					<BinaryExpr> EQ
						<ArrayAccess>
							<IdentifierExpr> a
							<IdentifierExpr> i
						<IntConst> 0
					<BlockStmt>
						<VariableDeclStmt>
							<VariableDecl> int j
						<ForStmt>
							<BinaryExpr> ASSIGN
								<IdentifierExpr> j
								<BinaryExpr> ADD
									<IdentifierExpr> i
									<IntConst> 1
							<BinaryExpr> LT
								<IdentifierExpr> j
								<IdentifierExpr> now
							<UnaryExpr> INC
								<IdentifierExpr> j
							<BlockStmt>
								<IfStmt>
									<BinaryExpr> NEQ
										<ArrayAccess>
											<IdentifierExpr> a
											<IdentifierExpr> j
										<IntConst> 0
									<BlockStmt>
										<FunctionCall>
											<IdentifierExpr> swap
											<IdentifierExpr> i
											<IdentifierExpr> j
										<BreakStmt>
		<ForStmt>
			<BinaryExpr> ASSIGN
				<IdentifierExpr> i
				<IntConst> 0
			<BinaryExpr> LT
				<IdentifierExpr> i
				<IdentifierExpr> now
			<UnaryExpr> INC
				<IdentifierExpr> i
			<BlockStmt>
				<IfStmt>
					<BinaryExpr> EQ
						<ArrayAccess>
							<IdentifierExpr> a
							<IdentifierExpr> i
						<IntConst> 0
					<BlockStmt>
						<BinaryExpr> ASSIGN
							<IdentifierExpr> now
							<IdentifierExpr> i
						<BreakStmt>
	<FunctionDecl> void move
		<VariableDeclStmt>
			<VariableDecl> int i
				<IntConst> 0
		<ForStmt>
			<BinaryExpr> LT
				<IdentifierExpr> i
				<IdentifierExpr> now
			<BlockStmt>
				<UnaryExpr> DEC
					<ArrayAccess>
						<IdentifierExpr> a
						<IdentifierExpr> i
				<BinaryExpr> ASSIGN
					<IdentifierExpr> i
					<BinaryExpr> ADD
						<IdentifierExpr> i
						<IntConst> 1
		<BinaryExpr> ASSIGN
			<ArrayAccess>
				<IdentifierExpr> a
				<IdentifierExpr> now
			<IdentifierExpr> now
		<UnaryExpr> INC_SUF
			<IdentifierExpr> now
	<FunctionDecl> int main
		<VariableDeclStmt>
			<VariableDecl> int T
				<IntConst> 0
		<VariableDeclStmt>
			<VariableDecl> int times
				<FunctionCall>
					<IdentifierExpr> getInt
		<ForStmt>
			<BinaryExpr> LT
				<IdentifierExpr> T
				<IdentifierExpr> times
			<UnaryExpr> INC
				<IdentifierExpr> T
			<BlockStmt>
				<VariableDeclStmt>
					<VariableDecl> int i
						<IntConst> 0
				<VariableDeclStmt>
					<VariableDecl> int temp
						<IntConst> 0
				<VariableDeclStmt>
					<VariableDecl> int count
						<IntConst> 0
				<BinaryExpr> ASSIGN
					<IdentifierExpr> n
					<IntConst> 5050
				<BinaryExpr> ASSIGN
					<IdentifierExpr> h
					<IntConst> 0
				<BinaryExpr> ASSIGN
					<IdentifierExpr> a
					<NewExpr> int[]
						<IntConst> 101
				<BinaryExpr> ASSIGN
					<IdentifierExpr> Q
					<BinaryExpr> DIV
						<IdentifierExpr> M
						<IdentifierExpr> A
				<BinaryExpr> ASSIGN
					<IdentifierExpr> R
					<BinaryExpr> MOD
						<IdentifierExpr> M
						<IdentifierExpr> A
				<IfStmt>
					<UnaryExpr> NOT
						<FunctionCall>
							<IdentifierExpr> pd
							<IdentifierExpr> n
					<BlockStmt>
						<FunctionCall>
							<IdentifierExpr> println
							<StringConst> Sorry, the number n must be a number s.t. there exists i satisfying n=1+2+...+i
						<ReturnStmt>
							<IntConst> 1
				<FunctionCall>
					<IdentifierExpr> println
					<StringConst> Let's start!
				<FunctionCall>
					<IdentifierExpr> initialize
					<FunctionCall>
						<IdentifierExpr> random
				<BinaryExpr> ASSIGN
					<IdentifierExpr> now
					<BinaryExpr> ADD
						<BinaryExpr> MOD
							<FunctionCall>
								<IdentifierExpr> random
							<IntConst> 10
						<IntConst> 1
				<FunctionCall>
					<IdentifierExpr> println
					<FunctionCall>
						<IdentifierExpr> toString
						<IdentifierExpr> now
				<ForStmt>
					<BinaryExpr> LT
						<IdentifierExpr> i
						<BinaryExpr> SUB
							<IdentifierExpr> now
							<IntConst> 1
					<UnaryExpr> INC
						<IdentifierExpr> i
					<BlockStmt>
						<BinaryExpr> ASSIGN
							<ArrayAccess>
								<IdentifierExpr> a
								<IdentifierExpr> i
							<BinaryExpr> ADD
								<BinaryExpr> MOD
									<FunctionCall>
										<IdentifierExpr> random
									<IntConst> 10
								<IntConst> 1
						<WhileStmt>
							<BinaryExpr> GT
								<BinaryExpr> ADD
									<ArrayAccess>
										<IdentifierExpr> a
										<IdentifierExpr> i
									<IdentifierExpr> temp
								<IdentifierExpr> n
							<BlockStmt>
								<BinaryExpr> ASSIGN
									<ArrayAccess>
										<IdentifierExpr> a
										<IdentifierExpr> i
									<BinaryExpr> ADD
										<BinaryExpr> MOD
											<FunctionCall>
												<IdentifierExpr> random
											<IntConst> 10
										<IntConst> 1
						<BinaryExpr> ASSIGN
							<IdentifierExpr> temp
							<BinaryExpr> ADD
								<IdentifierExpr> temp
								<ArrayAccess>
									<IdentifierExpr> a
									<IdentifierExpr> i
				<BinaryExpr> ASSIGN
					<ArrayAccess>
						<IdentifierExpr> a
						<BinaryExpr> SUB
							<IdentifierExpr> now
							<IntConst> 1
					<BinaryExpr> SUB
						<IdentifierExpr> n
						<IdentifierExpr> temp
				<FunctionCall>
					<IdentifierExpr> show
				<FunctionCall>
					<IdentifierExpr> merge
				<WhileStmt>
					<UnaryExpr> NOT
						<FunctionCall>
							<IdentifierExpr> win
					<BlockStmt>
						<UnaryExpr> INC
							<IdentifierExpr> count
						<FunctionCall>
							<IdentifierExpr> move
						<FunctionCall>
							<IdentifierExpr> merge
				<FunctionCall>
					<IdentifierExpr> println
					<BinaryExpr> ADD
						<BinaryExpr> ADD
							<StringConst> Total: 
							<FunctionCall>
								<IdentifierExpr> toString
								<IdentifierExpr> count
						<StringConst>  step(s)
		<ReturnStmt>
			<IntConst> 0
